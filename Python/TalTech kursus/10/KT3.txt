01 - last_to_first
Saab sisendiks sõne. Tagastab uue sõne, kus algse sõne viimane täht on liigutatud sõne algusesse.

02 - take_partial
Saab sisendiks sõne, ignoreeritavate sümbolite arvu leave_count ning võetavate sümbolite arvu take_count. Sisendsõne esimesed leave_count sümbolit tuleb ignoreerida, järgmised take_count sümbolit lähevad tagastatavasse sõnesse. Seejärel järgmised leave_count sümbolit ignoreeritakse jne. Sedasi korratakse kuni sisendsõne lõpuni.

03 - list_move
Funktsioon saab sisendiks järjendi (initial_list) ja kaks täisarvu (amount ja factor). Tagastada tuleb järjend, kus on sees on amount kogus järjendeid, mille sees olevad elemendid on kõik factor võrra nihkes paremale võrreldes eelmise elemendiga.

Tagastatava järjendi esimene järjend peaks olema sama, mis esialgne järjend. Näide: list_move(["o", "m", "g"], 3, 1) -> [["o", "m", "g"], ["g", "o", "m"], ["m", "g", "o"]]

Mall
"""KT3 (R12)."""


def last_to_first(s):
    """
    Move last symbol to the beginning of the string.

    last_to_first("ab") => "ba"
    last_to_first("") => ""
    last_to_first("hello") => "ohell"
    """
    pass


def take_partial(text: str, leave_count: int, take_count: int) -> str:
    """
    Take only part of the string.

    Ignore first leave_count symbols, then use next take_count symbols.
    Repeat the process until the end of the string.

    The following conditions are met (you don't have to check those):
    leave_count >= 0
    take_count >= 0
    leave_count + take_count > 0

    take_partial("abcdef", 2, 3) => "cde"
    take_partial("abcdef", 0, 1) => "abcdef"
    take_partial("abcdef", 1, 0) => ""
    """
    pass


def list_move(initial_list: list, amount: int, factor: int) -> list:
    """
    Create amount lists where elements are shifted right by factor.

    This function creates a list with amount of lists inside it.
    In each sublist, elements are shifted right by factor elements.
    factor >= 0

    list_move(["a", "b", "c"], 3, 0) => [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]
    list_move(["a", "b", "c"], 3, 1) => [['a', 'b', 'c'], ['c', 'a', 'b'], ['b', 'c', 'a']]
    list_move([1, 2, 3], 3, 2) => [[1, 2, 3], [2, 3, 1], [3, 1, 2]]
    list_move([1, 2, 3], 4, 1) => [[1, 2, 3], [3, 1, 2], [2, 3, 1], [1, 2, 3]]
    list_move([], 3, 4) => [[], [], []]
    """
    pass